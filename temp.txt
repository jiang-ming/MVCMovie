using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Configuration;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Data;
using System.Web.UI.WebControls;

namespace WebMap.Web
{
    public static class DBUtil
    {
        public enum FieldTypeEnum
        {
            Text,
            Number
        }
        public enum DBConnType
        {
            Oledb,
            Sql
        }

        public static string CheckFeatureSAID_oledb(String connectionName, String tableName, String txtObjectIDText, String saidField, String id_prefix = "")
        {
            //*** Warning - if the prefix is assigned, you should use the same prefix for all records.
            //              if you decide to change to a new prefix, all prefixes in the table must have the same number of characters 

            string returnSAID = "";
            //Check if the data record as a valie SiteAccess ID
            string ConnStr = ConfigurationManager.ConnectionStrings[connectionName].ConnectionString;
            OleDbConnection Conn = new OleDbConnection(ConnStr);
            string strSQL = string.Format("SELECT * FROM [{0}] WHERE [{1}] = {2}", tableName, "OBJECTID", txtObjectIDText);
            OleDbCommand pDBC = new OleDbCommand(strSQL, Conn);
            pDBC.Connection.Open();
            OleDbDataReader pDReader = pDBC.ExecuteReader();
            if (pDReader.HasRows)
            {
                pDReader.Read();
                if ((pDReader[saidField] is System.DBNull) || String.IsNullOrEmpty(pDReader[saidField].ToString()))
                {
                    //currently no SAID
                    OleDbConnection Conn2 = new OleDbConnection(ConnStr);

                    //assign temporary SAID
                    string newSAID = id_prefix + txtObjectIDText;

                    //check if feature class already uses this new SAID
                    string strSqlQuerySAID = string.Format("SELECT * FROM [{0}] WHERE [{1}]='{2}'", tableName, saidField, newSAID);
                    OleDbCommand queryCommand = new OleDbCommand(strSqlQuerySAID, Conn2);
                    queryCommand.Connection.Open();
                    OleDbDataReader pDReader2 = queryCommand.ExecuteReader();
                    if (pDReader2.HasRows)
                    {
                        //this SAID has already been used, find another one
                        OleDbConnection Conn3 = new OleDbConnection(ConnStr);
                        string queryMaxSAID;
                        if (String.IsNullOrWhiteSpace(id_prefix))
                        {
                            queryMaxSAID = string.Format("SELECT MAX(INT([{0}])) + 1 FROM [{1}]", saidField, tableName);
                        }
                        else
                        {
                            String prefix_length = id_prefix.Length.ToString();
                            queryMaxSAID = string.Format("SELECT MAX(INT(Mid([{0}],{2} + 1, Len([{0}]) - {2}))) + 1 FROM [{1}]", saidField, tableName, prefix_length);
                        }
                        OleDbCommand maxSAIDCommand = new OleDbCommand(queryMaxSAID, Conn3);
                        maxSAIDCommand.Connection.Open();
                        newSAID = id_prefix + maxSAIDCommand.ExecuteScalar().ToString(); //this will not return null as we can only fall here if SAID already exists
                        maxSAIDCommand.Connection.Close();
                    }
                    else
                    {
                        //OK, use temporary SAID as new SAID
                        //do nothing
                    }
                    queryCommand.Connection.Close();

                    //now assign SAID
                    string strSqlUpdate = string.Format("UPDATE [{0}] SET [{1}]='{2}' WHERE [{3}] = {4}", tableName, saidField, newSAID, "OBJECTID", txtObjectIDText);
                    OleDbCommand pUpdateCommand = new OleDbCommand(strSqlUpdate, Conn2);
                    pUpdateCommand.Connection.Open();
                    pUpdateCommand.ExecuteNonQuery();
                    pUpdateCommand.Connection.Close();
                    returnSAID = newSAID;

                }
                else
                {
                    //SAID exists, use it!!
                    returnSAID = pDReader[saidField].ToString();
                }
            }
            pDBC.Connection.Close();
            return returnSAID;
        }

        public static string CheckFeatureSAID_sqldb(String connectionName, String tableName, String txtObjectIDText, String saidField, String id_prefix = "")
        {
            //*** Warning - if the prefix is assigned, you should use the same prefix for all records.
            //              if you decide to change to a new prefix, all prefixes in the table must have the same number of characters 

            string returnSAID = "";
            //Check if the data record as a valie SiteAccess ID
            string ConnStr = ConfigurationManager.ConnectionStrings[connectionName].ConnectionString;
            SqlConnection Conn = new SqlConnection(ConnStr);
            string strSQL = string.Format("SELECT * FROM [{0}] WHERE [{1}] = {2}", tableName, "OBJECTID", txtObjectIDText);
            SqlCommand pDBC = new SqlCommand(strSQL, Conn);
            pDBC.Connection.Open();
            SqlDataReader pDReader = pDBC.ExecuteReader();
            if (pDReader.HasRows)
            {
                pDReader.Read();
                if ((pDReader[saidField] is System.DBNull) || String.IsNullOrEmpty(pDReader[saidField].ToString()))
                {
                    //currently no SAID
                    SqlConnection Conn2 = new SqlConnection(ConnStr);

                    //assign temporary SAID
                    string newSAID = id_prefix + txtObjectIDText;

                    //check if feature class already uses this new SAID
                    string strSqlQuerySAID = string.Format("SELECT * FROM [{0}] WHERE [{1}]='{2}'", tableName, saidField, newSAID);
                    SqlCommand queryCommand = new SqlCommand(strSqlQuerySAID, Conn2);
                    queryCommand.Connection.Open();
                    SqlDataReader pDReader2 = queryCommand.ExecuteReader();
                    if (pDReader2.HasRows)
                    {
                        //this SAID has already been used, find another one
                        SqlConnection Conn3 = new SqlConnection(ConnStr);
                        string queryMaxSAID;
                        if (String.IsNullOrWhiteSpace(id_prefix))
                        {
                            queryMaxSAID = string.Format("SELECT MAX(CAST([{0}] AS Int)) + 1 FROM [{1}]", saidField, tableName);
                        }
                        else
                        {
                            String prefix_length = id_prefix.Length.ToString();
                            queryMaxSAID = string.Format("SELECT MAX(CAST(SubString([{0}],{2} + 1, Len([{0}]) - {2}) AS Int)) + 1 FROM [{1}]", saidField, tableName, prefix_length);
                        }
                        SqlCommand maxSAIDCommand = new SqlCommand(queryMaxSAID, Conn3);
                        maxSAIDCommand.Connection.Open();
                        newSAID = id_prefix +  maxSAIDCommand.ExecuteScalar().ToString(); //this will not return null as we can only fall here if SAID already exists
                        maxSAIDCommand.Connection.Close();
                    }
                    else
                    {
                        //OK, use temporary SAID as new SAID
                        //do nothing
                    }
                    queryCommand.Connection.Close();

                    //now assign SAID
                    string strSqlUpdate = string.Format("UPDATE [{0}] SET [{1}]='{2}' WHERE [{3}] = {4}", tableName, saidField, newSAID, "OBJECTID", txtObjectIDText);
                    SqlCommand pUpdateCommand = new SqlCommand(strSqlUpdate, Conn2);
                    pUpdateCommand.Connection.Open();
                    pUpdateCommand.ExecuteNonQuery();
                    pUpdateCommand.Connection.Close();
                    returnSAID = newSAID;

                }
                else
                {
                    //SAID exists, use it!!
                    returnSAID = pDReader[saidField].ToString();
                }
            }
            pDBC.Connection.Close();
            return returnSAID;
        }
        public static List<String> DoLookupSQL(String connectionName, String tableName, String Keyfield, FieldTypeEnum KeyType, String KeyValue, List<String> FieldToReturn)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[connectionName].ConnectionString;
            SqlConnection Conn = new SqlConnection(ConnStr);
            String enclosure = (KeyType == FieldTypeEnum.Text) ? "'" : "";
            String strSQL = string.Format("SELECT * FROM [{0}] WHERE [{1}] = {3}{2}{3}", tableName, Keyfield, KeyValue, enclosure);
            SqlCommand pDBC = new SqlCommand(strSQL, Conn);
            pDBC.Connection.Open();
            SqlDataReader pDReader = pDBC.ExecuteReader();
            List<String> returnval = new List<String>();
            if (pDReader.HasRows)
            {
                pDReader.Read();
                foreach (String f2r in FieldToReturn)
                {
                    returnval.Add(pDReader[f2r].ToWSSafeString());
                }
            }
            pDBC.Connection.Close();
            return returnval;
        }

        public static List<String> DoLookupOLEDB(String connectionName, String tableName, String Keyfield, FieldTypeEnum KeyType, String KeyValue, List<String> FieldToReturn)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[connectionName].ConnectionString;
            OleDbConnection Conn = new OleDbConnection(ConnStr);
            String enclosure = (KeyType == FieldTypeEnum.Text) ? "'" : "";
            String strSQL = string.Format("SELECT * FROM [{0}] WHERE [{1}] = {3}{2}{3}", tableName, Keyfield, KeyValue, enclosure);
            OleDbCommand pDBC = new OleDbCommand(strSQL, Conn);
            pDBC.Connection.Open();
            OleDbDataReader pDReader = pDBC.ExecuteReader();
            List<String> returnval = new List<String>();
            if (pDReader.HasRows)
            {
                pDReader.Read();
                foreach (String f2r in FieldToReturn)
                {
                    returnval.Add(pDReader[f2r].ToWSSafeString());
                }
            }
            pDBC.Connection.Close();
            return returnval;
        }

        public static DataTable GetOLEDataTable(string sFeatureClassDBConnection, SqlDataSource sqlDataSourceControl, string sTableName)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[sFeatureClassDBConnection].ConnectionString;
            OleDbConnection Conn = new OleDbConnection(ConnStr);
            string strSQL = sqlDataSourceControl.SelectCommand;
            OleDbDataAdapter pDA = new OleDbDataAdapter(strSQL, ConnStr);
            DataSet pDS = new DataSet();
            pDA.Fill(pDS, sTableName);
            System.Web.HttpContext.Current.Session[sTableName] = pDS.Tables[sTableName];  //this is used in form dd routine for caching lookup table
            return pDS.Tables[sTableName];
        }
        public static DataTable GetOLEDataTable(string sDBConnection, string sQuery, string sTableName)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[sDBConnection].ConnectionString;
            OleDbConnection Conn = new OleDbConnection(ConnStr);
            OleDbDataAdapter pDA = new OleDbDataAdapter(sQuery, Conn);
            DataSet pDS = new DataSet();
            pDA.Fill(pDS, sTableName);
            return pDS.Tables[sTableName];
        }
        public static DataTable GetSQLDataTable(string sFeatureClassDBConnection, SqlDataSource sqlDataSourceControl, string sTableName)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[sFeatureClassDBConnection].ConnectionString;
            SqlConnection Conn = new SqlConnection(ConnStr);
            string strSQL = sqlDataSourceControl.SelectCommand;
            SqlDataAdapter pDA = new SqlDataAdapter(strSQL, ConnStr);
            DataSet pDS = new DataSet();
            pDA.Fill(pDS, sTableName);
            System.Web.HttpContext.Current.Session[sTableName] = pDS.Tables[sTableName];  //this is used in form dd routine for caching lookup table
            return pDS.Tables[sTableName];
        }
        public static DataTable GetSQLDataTable(string sDBConnection, string sQuery, string sTableName)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[sDBConnection].ConnectionString;
            SqlConnection Conn = new SqlConnection(ConnStr);
            SqlDataAdapter pDA = new SqlDataAdapter(sQuery, Conn);
            DataSet pDS = new DataSet();
            pDA.Fill(pDS, sTableName);
            return pDS.Tables[sTableName];
        }

        public static Int32 InsertDataRecordSQL(String ConnectionName, String Table, Dictionary<String, String> data)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[ConnectionName].ConnectionString;
            SqlConnection Conn = new SqlConnection(ConnStr);
            List<String> col = new List<string>();
            List<String> val = new List<string>();
            foreach (KeyValuePair<String, String> item in data)
            {
                col.Add(item.Key);
                val.Add(item.Value);
            }
            string insertSql = string.Format("INSERT INTO [{0}] ({1}) VALUES ({2}); SELECT SCOPE_IDENTITY();", Table, String.Join(",", col.ToArray()), String.Join(",", val.ToArray()));
            SqlCommand insertCommand = new SqlCommand(insertSql, Conn);
            insertCommand.Connection.Open();
            Int32 rowID = Convert.ToInt32(insertCommand.ExecuteScalar());
            insertCommand.Connection.Close();
            return rowID;
        }

        public static Int32 InsertDataRecordOleDB(String ConnectionName, String Table, Dictionary<String, String> data)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[ConnectionName].ConnectionString;
            OleDbConnection Conn = new OleDbConnection(ConnStr);
            List<String> col = new List<string>();
            List<String> val = new List<string>();
            foreach (KeyValuePair<String, String> item in data)
            {
                col.Add(item.Key);
                val.Add(item.Value);
            }
            string insertSql = string.Format("INSERT INTO [{0}] ({1}) VALUES ({2})", Table, String.Join(",", col.ToArray()), String.Join(",", val.ToArray()));
            OleDbCommand insertCommand = new OleDbCommand(insertSql, Conn);
            insertCommand.Connection.Open();
            insertCommand.ExecuteNonQuery();

            //get @@Identity
            OleDbCommand cmdGetidentity = new OleDbCommand("SELECT @@IDENTITY", Conn);
            Int32 lngNewID = Convert.ToInt32(cmdGetidentity.ExecuteScalar());
            insertCommand.Connection.Close();
            return lngNewID;
        }

        public static void CopyRecordOLEDB(string sSourceConnName, string sSourceTable, string sTargetConnName, string sTargetTable, string sKeyField, string sKeyValue, FieldTypeEnum sKeyType = FieldTypeEnum.Number, bool bSkipOID = true, bool bSkipShape = true, bool bSkipUID = true, String remapUidField = "", string TimeStampField = "", string OtherFieldsToSkip = "")
        {
            //===========================================================================================================
            //backup current information before updating Trees feature class table
            //===========================================================================================================
            //process comma delimited skip field list
            string[] fts = OtherFieldsToSkip.Split(new String[] { "," }, StringSplitOptions.None);

            //open source record
            string sKeySQL = (sKeyType == FieldTypeEnum.Number ? sKeyValue : string.Format("'{0}'", sKeyValue));
            string ConnStrSource = ConfigurationManager.ConnectionStrings[sSourceConnName].ConnectionString;
            string strSQL = string.Format("Select * from [{0}] where [{1}] = {2}", sSourceTable, sKeyField, sKeySQL);
            OleDbConnection ConnSource = new OleDbConnection(ConnStrSource);
            OleDbDataAdapter pDA = new OleDbDataAdapter(strSQL, ConnSource);
            DataSet pDS = new DataSet();
            pDA.Fill(pDS, "SourceTable");
            DataTable pTable = pDS.Tables["SourceTable"];
            DataRow[] pDR = pTable.Select();

            //copy field values to target table
            string sKeySQL2 = (sKeyType == FieldTypeEnum.Number ? "-1" : "'-1'");
            string ConnStrTarget = ConfigurationManager.ConnectionStrings[sTargetConnName].ConnectionString;
            OleDbConnection ConnTarget = new OleDbConnection(ConnStrTarget);
            OleDbDataAdapter pDA2 = new OleDbDataAdapter(string.Format("SELECT * FROM [{0}] WHERE FALSE", sTargetTable, sKeyField, sKeySQL2), ConnTarget);
            OleDbCommandBuilder builder = new OleDbCommandBuilder(pDA2);
            //field names may be reserved words, make sure the command builder enclose them with []
            builder.QuotePrefix = "[";
            builder.QuoteSuffix = "]";
            //add row and copy field values
            DataSet pDS2 = new DataSet();
            pDA2.Fill(pDS2, "TargetTable");
            DataTable pTable2 = pDS2.Tables["TargetTable"];
            DataRow pDR2 = pTable2.NewRow();
            int i = 0;
            //Try
            for (i = 0; i <= pTable.Columns.Count - 1; i++)
            {
                switch (pTable.Columns[i].ColumnName.ToUpper())
                {
                    case "OBJECTID":
                    case "OID":
                    case "FID":
                        if (!bSkipOID)
                        {
                            pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                        }
                        break;
                    case "SHAPE":
                        if (!bSkipShape)
                        {
                            pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                        }
                        break;
                    case "UID":
                        if (!bSkipUID)
                        {
                            if (String.IsNullOrEmpty(remapUidField))
                            {
                                pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                            }
                            else
                            {
                                pDR2[remapUidField] = pDR[0][pTable.Columns[i].ColumnName];
                            }
                        }
                        break;
                    default:
                        if (!string.IsNullOrEmpty(OtherFieldsToSkip) && fts.Contains(pTable.Columns[i].ColumnName, StringComparer.CurrentCultureIgnoreCase))
                        {
                            //do nothing
                        }
                        else
                        {
                            pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                        }
                        break;
                }
            }

            if (!string.IsNullOrEmpty(TimeStampField))
            {
                pDR2[TimeStampField] = DateTime.Now;
            }
            //update additional fields as needed
            //pDR2.Item("DATE_EDITED") = DateTime.Now.ToString
            //pDR2.Item("EDITED_BY") = User.Identity.Name.ToString.ToUpper

            //commit changes
            pTable2.Rows.Add(pDR2);
            builder.GetInsertCommand();
            pDA2.Update(pDS2, "TargetTable");
            //close connection
            ConnSource.Close();
            ConnTarget.Close();
        }

        public static void CopyRecordSqlDB(string sSourceConnName, string sSourceTable, string sTargetConnName, string sTargetTable, string sKeyField, string sKeyValue, FieldTypeEnum sKeyType = FieldTypeEnum.Number, bool bSkipOID = true, bool bSkipShape = true, bool bSkipUID = true, String remapUidField = "", string TimeStampField = "", string OtherFieldsToSkip = "")
        {
            //===========================================================================================================
            //backup current information before updating Trees feature class table
            //===========================================================================================================
            //process comma delimited skip field list
            string[] fts = OtherFieldsToSkip.Split(new String[] { "," }, StringSplitOptions.None);

            //open source record
            string sKeySQL = (sKeyType == FieldTypeEnum.Number ? sKeyValue : string.Format("'{0}'", sKeyValue));
            string ConnStrSource = ConfigurationManager.ConnectionStrings[sSourceConnName].ConnectionString;
            string strSQL = string.Format("Select * from [{0}] where [{1}] = {2}", sSourceTable, sKeyField, sKeySQL);
            SqlConnection ConnSource = new SqlConnection(ConnStrSource);
            SqlDataAdapter pDA = new SqlDataAdapter(strSQL, ConnSource);
            DataSet pDS = new DataSet();
            pDA.Fill(pDS, "SourceTable");
            DataTable pTable = pDS.Tables["SourceTable"];
            DataRow[] pDR = pTable.Select();

            //copy field values to target table
            string sKeySQL2 = (sKeyType == FieldTypeEnum.Number ? "-1" : "'-1'");
            string ConnStrTarget = ConfigurationManager.ConnectionStrings[sTargetConnName].ConnectionString;
            SqlConnection ConnTarget = new SqlConnection(ConnStrTarget);
            SqlDataAdapter pDA2 = new SqlDataAdapter(string.Format("SELECT * FROM [{0}] WHERE [{1}] = {2}", sTargetTable, sKeyField, sKeySQL2), ConnTarget);
            SqlCommandBuilder builder = new SqlCommandBuilder(pDA2);
            //field names may be reserved words, make sure the command builder enclose them with []
            builder.QuotePrefix = "[";
            builder.QuoteSuffix = "]";
            //add row and copy field values
            DataSet pDS2 = new DataSet();
            pDA2.Fill(pDS2, "TargetTable");
            DataTable pTable2 = pDS2.Tables["TargetTable"];
            DataRow pDR2 = pTable2.NewRow();
            int i = 0;
            //Try
            for (i = 0; i <= pTable.Columns.Count - 1; i++)
            {
                switch (pTable.Columns[i].ColumnName.ToUpper())
                {
                    case "OBJECTID":
                    case "OID":
                    case "FID":
                        if (!bSkipOID)
                        {
                            pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                        }
                        break;
                    case "SHAPE":
                        if (!bSkipShape)
                        {
                            pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                        }
                        break;
                    case "UID":
                        if (!bSkipUID)
                        {
                            if (String.IsNullOrEmpty(remapUidField))
                            {
                                pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                            }
                            else
                            {
                                pDR2[remapUidField] = pDR[0][pTable.Columns[i].ColumnName];
                            }
                        }
                        break;
                    default:
                        if (!string.IsNullOrEmpty(OtherFieldsToSkip) && fts.Contains(pTable.Columns[i].ColumnName, StringComparer.CurrentCultureIgnoreCase))
                        {
                            //do nothing
                        }
                        else
                        {
                            pDR2[pTable.Columns[i].ColumnName] = pDR[0][pTable.Columns[i].ColumnName];
                        }
                        break;
                }
            }

            if (!string.IsNullOrEmpty(TimeStampField))
            {
                pDR2[TimeStampField] = DateTime.Now;
            }
            //update additional fields as needed
            //pDR2.Item("DATE_EDITED") = DateTime.Now.ToString
            //pDR2.Item("EDITED_BY") = User.Identity.Name.ToString.ToUpper

            //commit changes
            pTable2.Rows.Add(pDR2);
            builder.GetInsertCommand();
            pDA2.Update(pDS2, "TargetTable");
            //close connection
            ConnSource.Close();
            ConnTarget.Close();
        }

        public static Int32 ConnExecute(DBConnType conntype, String connname, String sql)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[connname].ConnectionString;
            switch (conntype)
            {
                case DBConnType.Oledb:
                    OleDbConnection Conn = new OleDbConnection(ConnStr);
                    OleDbCommand cmd = new OleDbCommand(sql, Conn);
                    cmd.Connection.Open();
                    Int32 rowAffected = cmd.ExecuteNonQuery();
                    cmd.Connection.Close();
                    return rowAffected;
                case DBConnType.Sql:
                    SqlConnection Conn2 = new SqlConnection(ConnStr);
                    SqlCommand cmd2 = new SqlCommand(sql, Conn2);
                    cmd2.Connection.Open();
                    Int32 rowAffected2 = cmd2.ExecuteNonQuery();
                    cmd2.Connection.Close();
                    return rowAffected2;
                default:
                    return -1;
            }
        }

        public static Object ConnExecuteScalar(DBConnType conntype, String connname, String sql)
        {
            string ConnStr = ConfigurationManager.ConnectionStrings[connname].ConnectionString;
            switch (conntype)
            {
                case DBConnType.Oledb:
                    OleDbConnection Conn = new OleDbConnection(ConnStr);
                    OleDbCommand cmd = new OleDbCommand(sql, Conn);
                    cmd.Connection.Open();
                    Object firstRowFirstCol = cmd.ExecuteScalar();
                    cmd.Connection.Close();
                    return firstRowFirstCol;
                case DBConnType.Sql:
                    SqlConnection Conn2 = new SqlConnection(ConnStr);
                    SqlCommand cmd2 = new SqlCommand(sql, Conn2);
                    cmd2.Connection.Open();
                    Object firstRowFirstCol2 = cmd2.ExecuteScalar();
                    cmd2.Connection.Close();
                    return firstRowFirstCol2;
                default:
                    return -1;
            }
        }

        public static void LogWMARequest(String sFlag = "")
        {
            bool bDoNotLog = false;
            if (string.IsNullOrEmpty(ConfigurationManager.AppSettings["DoNotLogRequest"]))
            {
                bDoNotLog = false;
            }
            else
            {
                bDoNotLog = bool.Parse(ConfigurationManager.AppSettings["DoNotLogRequest"]);
            }

            if (!bDoNotLog)
            {
                string sAppName = ConfigurationManager.AppSettings["ApplicationName"];
                string sAppURL = System.Web.HttpContext.Current.Request.Url.ToString().Replace(System.IO.Path.GetFileName(System.Web.HttpContext.Current.Request.Url.AbsolutePath), "");
                string[] sURL = sAppURL.Split(new String[] { "?" }, StringSplitOptions.RemoveEmptyEntries);
                string sBaseURL = sURL[0];
                if (sBaseURL.Length > 80)
                    sBaseURL = sBaseURL.Substring(0, 80);
                string sURLArgument = string.Empty;
                if (sURL.GetUpperBound(0) > 0)
                {
                    sURLArgument = sURL[1];
                    if (sURLArgument.Length > 100)
                        sURLArgument = sURLArgument.Substring(0, 100);
                }

                //DoNotLogRequest
                System.Data.OleDb.OleDbConnection IPDBConnection = new System.Data.OleDb.OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + "\\\\PROD3\\arcgisserver_data\\_logDB\\_WMA_Request_Log.mdb");
                string strCommand = string.Format("Insert into [RequestLog] ([DATETIME],[WMA],[WMA_NAME],[USER],[IP],[HOST],[PARAMETERS],[FLAG]) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}')", DateTime.Now.ToString(), sBaseURL, sAppName, System.Web.HttpContext.Current.User.Identity.Name.ToString().ToUpper(), System.Web.HttpContext.Current.Request.UserHostAddress, System.Web.HttpContext.Current.Session["sHost"].ToString(), sURLArgument, sFlag);
                System.Data.OleDb.OleDbCommand myCommand = new System.Data.OleDb.OleDbCommand(strCommand, IPDBConnection);
                myCommand.Connection.Open();
                myCommand.ExecuteNonQuery();
                myCommand.Connection.Close();
            }
        }
    }
}
